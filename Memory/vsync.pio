.program vsync
.side_set 1 opt

; frontporch: 1  lines
; sync pulse: 2   lines
; back porch: 22  lines (perhaps we try 32, since that's easier)
; active for: 600 lines
;
; Code size could be reduced with side setting

.wrap_target                      ; Program wraps to here

; ACTIVE
mov x, osr                        ; Copy value from OSR to x scratch register
activefront:
    wait 1 irq 0                  ; Wait for hsync to go high
    irq 1                         ; Signal first rgb machine that we're in active mode
    wait 1 irq 0                  ; Wait for hsync to go high
    irq 2                         ; Signal second rgb machine that we're in active mode
    jmp x-- activefront           ; Remain in active mode, decrementing counter

; FRONTPORCH
wait 1 irq 0                  ;

; SYNC PULSE
set pins, 0                       ; Set pin low
wait 1 irq 0                      ; Wait for one line
wait 1 irq 0                      ; Wait for a second line

; BACKPORCH
set y, 21                         ; First part of back porch into y scratch register (and delays a cycle)
backporch:
    wait 1 irq 0   side 1         ; Wait for hsync to go high - SIDESET REPLACEMENT HERE
    jmp y-- backporch             ; Remain in backporch, decrementing counter

.wrap                             ; Program wraps from here



% c-sdk {
static inline void vsync_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = vsync_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);

    // Set clock division (div by 5 for 25 MHz state machine)
    //sm_config_set_clkdiv(&c, 10) ;

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_put_blocking(pio, sm, 299); // 
    pio_sm_exec(pio, sm, pio_encode_pull(false, false));
}
%}
